# Default values for cla-assistant.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

claAssistant:
  host: "adasdad"
  port: 23
  hostPort: 80
  protocol: "http"

github:
  client:
  user:
  secret: "a3da5d4a65ds"
  password: "a3da5d4a65ds"
  token: "a3da5d4a65ds"

mongodb:
  mongodbRootPassword: "LKDJLKJDSKLJASKLJD"
  service:
    port: 56985
  mongodbUsername: mongol
  mongodbPassword: "password"
  mongodbDatabase: cla
  replicaSet:
    enabled: true
    replicas:
      secondary: 1
      arbiter: 1
    pdb:
      enabled: true
      minAvailable:
        secondary: 1
        arbiter: 1
  resourcesArbiter:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  metrics:
    enabled: true
    image:
      registry: docker.io
      repository: bitnami/mongodb-exporter
      tag: 0.10.0-debian-9-r77
      pullPolicy: IfNotPresent
    livenessProbe:
      enabled: true
      initialDelaySeconds: 15
      periodSeconds: 5
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1
    readinessProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 1
      failureThreshold: 3
      successThreshold: 1
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9216"
    serviceMonitor:
      enabled: true

replicaCount: 1

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

metrics:
  enabled: true
  serviceMonitor:
    enabled: true
